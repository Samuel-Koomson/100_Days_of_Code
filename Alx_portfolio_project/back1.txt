from flask import Flask, render_template, request, redirect, url_for
from vegg_list import vegetables
from alx_portfolio_project import calculate_cost, check_quantity_in_stock, sufficient_money

app = Flask(__name__)

# Use session to store the shopping cart (requires Flask-Session extension)
# app.config['SECRET_KEY'] = 'your_secret_key'
# app.config['SESSION_TYPE'] = 'filesystem'
# app.config['SESSION_PERMANENT'] = False

# # Initialize the session
# from flask_session import Session
# Session(app)

# Define routes

@app.route('/')
def home():
    return render_template('home_page.html')

# @app.route('/select_items', methods=['GET', 'POST'])
# def select_items():
#     if request.method == 'POST':
#         selected_vegetables = request.form.getlist('vegetable')
#         quantities = request.form.getlist('quantity')

#         for veggie, quantity in zip(selected_vegetables, quantities):
#             # Use session to store the shopping cart
#             if 'shopping_cart' not in session:
#                 session['shopping_cart'] = []
#             session['shopping_cart'].append((veggie, int(quantity)))

#         return redirect(url_for('view_shopping_cart'))

#     return render_template('vegetable_selection.html', vegetables=vegetables)

# @app.route('/shopping_cart')
# def view_shopping_cart():
#     shopping_cart = session.get('shopping_cart', [])
#     return render_template('shopping_cart.html', shopping_cart=shopping_cart)

# @app.route('/check_quantity')
# def check_quantity():
#     shopping_cart = session.get('shopping_cart', [])
#     shelf_stock, out_of_stock_veggies = check_quantity_in_stock(shopping_cart)

#     if shelf_stock:
#         return "All items are in stock."
#     else:
#         return f"Sorry, {', '.join(out_of_stock_veggies)} is out of stock, check back later."

# @app.route('/calculate_cost')
# def calculate_cart_cost():
#     shopping_cart = session.get('shopping_cart', [])
#     total_cost = calculate_cost(shopping_cart)
#     return render_template('calculate_cost.html', total_cost=total_cost)

# @app.route('/payment', methods=['GET', 'POST'])
# def payment():
#     if request.method == 'POST':
#         credit_card_num = int(request.form['card-number'])
#         confirm_credit_card_num = int(request.form['card-confirmation'])

#         if credit_card_num == confirm_credit_card_num:
#             return redirect(url_for('purchase'))

#     return render_template('payment_information.html')

# @app.route('/purchase')
# def purchase():
#     shopping_cart = session.get('shopping_cart', [])
#     total_cost = calculate_cost(shopping_cart)
#     wallet_amount = 100

#     if sufficient_money(total_cost, wallet_amount):
#         return "Purchase Successful"
#     else:
#         return "Insufficient funds in your wallet"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)
